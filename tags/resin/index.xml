<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resin on Antonio Lignan&#39;s blog</title>
    <link>/tags/resin/</link>
    <description>Recent content in Resin on Antonio Lignan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Antonio Lignan, All rights reserved - Opinions are my own</copyright>
    <lastBuildDate>Sat, 25 Nov 2017 14:34:13 +0100</lastBuildDate>
    
	<atom:link href="/tags/resin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A resin.io example service</title>
      <link>/post/resinio-example-service/</link>
      <pubDate>Sat, 25 Nov 2017 14:34:13 +0100</pubDate>
      
      <guid>/post/resinio-example-service/</guid>
      <description>A resin.io example service This is part of my Challenge to make 26 years before 2017 ends.
This is part of my Project to build an autonomous and remote-controlled watering system for my bonsai, and part of my learning journey to use resin.io. The first step was to understand how to deploy to resin.io and my target device.
Setting up the repository and first tests The project repository lives at: https://github.</description>
    </item>
    
    <item>
      <title>About Resin.io and ResinOS</title>
      <link>/post/resin-io-about/</link>
      <pubDate>Sun, 22 Oct 2017 22:35:30 +0200</pubDate>
      
      <guid>/post/resin-io-about/</guid>
      <description>Understanding Resin and ResinOS I felt I needed to write this post about Resin.io, as I was jumping directly into deploying and building in a Raspberry Pi (see this post), just jumping from one tutorial to the next.
It is good to pace down, understand, and then go full speed.
Resin.io  Resin.io makes it simple to deploy, update, and maintain code running on remote devices. We are bringing the web development and deployment workflow to hardware, using tools like git and Docker to allow you to seamlessly update all your embedded linux devices in the wild.</description>
    </item>
    
    <item>
      <title>Configure a Resin-based RPi for Local Access</title>
      <link>/post/configure-rpi-resin-local-access/</link>
      <pubDate>Sun, 22 Oct 2017 20:08:49 +0200</pubDate>
      
      <guid>/post/configure-rpi-resin-local-access/</guid>
      <description>Accessing a Resin.io-based Raspberry Pi Quick cookbook for future me.
From Resin.io Raspberry Pi guide:
 Remove the MicroSD card, under the /boot partition locate and edit the /boot/config.json file. Change the hostname accordingly:  { &amp;quot;persistentLogging&amp;quot;: false, &amp;quot;hostname&amp;quot;: &amp;quot;resin&amp;quot;, }   Configure the local network. I think this can also be done remotely, however is handy to know where to look:  [connection] id=resin-sample type=wifi [wifi] mode=infrastructure ssid=I_Love_Unicorns [wifi-security] auth-alg=open key-mgmt=wpa-psk psk=superSecretPassword [ipv4] method=auto [ipv6] addr-gen-mode=stable-privacy method=auto   Pinging the device (if you haven&amp;rsquo;t changed the hostname):  $ ping resin.</description>
    </item>
    
    <item>
      <title>IoT automated plant watering and monitoring system</title>
      <link>/projects/monitor-automate-plant/</link>
      <pubDate>Sun, 22 Oct 2017 19:10:16 +0200</pubDate>
      
      <guid>/projects/monitor-automate-plant/</guid>
      <description>IoT automated plant watering and monitoring system This project idea came out while thinking about stuff to build before year 2017 ends. The motivation is simple: avoid plants dying in my watch, likely also saving some lives in my wife&amp;rsquo;s garden as well if everything goes OK.
Whilst installing sensors is easy, I want to experiment with other technologies and paradigms as well, thus this project is a sandbox to learn and test new concepts and applications, having a concrete use case in mind.</description>
    </item>
    
  </channel>
</rss>